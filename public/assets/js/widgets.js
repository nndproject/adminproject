/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/widgets.js":
/*!*********************************!*\
  !*** ./resources/js/widgets.js ***!
  \*********************************/
/***/ (() => {

eval("/*! widgets.js | Huro | Css ninja 2020-2021 */\n\n/*\n    1. Gauge Widget (UI Widgets)\n    2. Trend Widget (UI Widgets)\n    3. Social Bar Widget (UI Widgets)\n    4. Line Stats Widget (Stat Widgets)\n    5. Area Stats Widget (Stat Widgets)\n    6. Spark Tile Widget (Stat Widgets)\n    7. Flex Stat Widget (Stat Widgets)\n    8. Grouped Stat Widget (Stat Widgets)\n*/\n\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n$(document).ready(function () {\n  /* ==========================================================================\n  1. Gauge Widget (UI Widgets)\n  ========================================================================== */\n  if ($('#gauge-holder').length) {\n    var gaugeWidgetChart = bb.generate({\n      data: {\n        columns: [[\"data\", 91.4]],\n        type: \"gauge\",\n        onclick: function onclick(d, i) {\n          console.log(\"onclick\", d, i);\n        },\n        onover: function onover(d, i) {\n          console.log(\"onover\", d, i);\n        },\n        onout: function onout(d, i) {\n          console.log(\"onout\", d, i);\n        }\n      },\n      gauge: {},\n      color: {\n        pattern: [themeColors.accent, themeColors.secondary, themeColors.orange, themeColors.purple],\n        threshold: {\n          values: [30, 60, 90, 100]\n        }\n      },\n      size: {\n        height: 120\n      },\n      padding: {\n        bottom: 20\n      },\n      legend: {\n        show: false,\n        position: \"inset\"\n      },\n      bindto: \"#gauge-holder\"\n    });\n    setTimeout(function () {\n      gaugeWidgetChart.load({\n        columns: [[\"data\", 10]]\n      });\n    }, 1000);\n    setTimeout(function () {\n      gaugeWidgetChart.load({\n        columns: [[\"data\", 50]]\n      });\n    }, 2000);\n    setTimeout(function () {\n      gaugeWidgetChart.load({\n        columns: [[\"data\", 70]]\n      });\n    }, 3000);\n    setTimeout(function () {\n      gaugeWidgetChart.load({\n        columns: [[\"data\", 0]]\n      });\n    }, 4000);\n    setTimeout(function () {\n      gaugeWidgetChart.load({\n        columns: [[\"data\", 100]]\n      });\n    }, 5000);\n  }\n  /* ==========================================================================\n  2. Trend Widget (UI Widgets)\n  ========================================================================== */\n\n\n  if ($('#trend-chart').length) {\n    var options6 = {\n      series: [{\n        name: 'series1',\n        data: [31, 40, 28, 51, 42, 109, 100]\n      }],\n      chart: {\n        height: '200px',\n        width: '100%',\n        type: 'line',\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [themeColors.accent, themeColors.purple, themeColors.orange],\n      grid: {\n        show: false,\n        padding: {\n          left: -20,\n          right: 0\n        }\n      },\n      padding: {\n        bottom: 0,\n        left: 0,\n        right: 0\n      },\n      legend: {\n        show: false,\n        position: 'top'\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [2, 2, 2],\n        curve: 'smooth'\n      },\n      xaxis: {\n        type: 'datetime',\n        categories: [\"2018-09-19T00:00:00.000Z\", \"2018-09-19T01:30:00.000Z\", \"2018-09-19T02:30:00.000Z\", \"2018-09-19T03:30:00.000Z\", \"2018-09-19T04:30:00.000Z\", \"2018-09-19T05:30:00.000Z\", \"2018-09-19T06:30:00.000Z\"],\n        labels: {\n          show: false\n        },\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          offsetX: -40\n        }\n      },\n      tooltip: {\n        x: {\n          format: 'dd/MM/yy HH:mm'\n        }\n      }\n    };\n    var trendWidgetChart = new ApexCharts(document.querySelector(\"#trend-chart\"), options6);\n    trendWidgetChart.render();\n  }\n  /* ==========================================================================\n  3. Social Bar Widget (UI Widgets)\n  ========================================================================== */\n\n\n  $('.social-buttons-widget .inner-button').on('click', function () {\n    var $container = $(this).closest('.social-buttons-widget');\n    $container.find('.inner-button').removeClass('is-active');\n    $(this).addClass('is-active');\n  });\n  /* ==========================================================================\n  4. Line Stats Widget (Stat Widgets)\n  ========================================================================== */\n\n  if ($('#line-stats-widget-chart').length) {\n    var lineStatsChartOptions = {\n      series: [{\n        name: \"Revenue\",\n        data: [10835, 40214, 36257, 51411, 45697, 61221, 65295, 91512, 75648]\n      }],\n      chart: {\n        height: 250,\n        type: 'line',\n        zoom: {\n          enabled: false\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [themeColors.accent],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [2, 2, 2],\n        curve: 'smooth'\n      },\n      grid: {\n        row: {\n          colors: ['transparent', 'transparent'],\n          // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct']\n      },\n      tooltip: {\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val;\n          }\n        }\n      }\n    };\n    var lineStatsChart = new ApexCharts(document.querySelector(\"#line-stats-widget-chart\"), lineStatsChartOptions);\n    lineStatsChart.render();\n  }\n  /* ==========================================================================\n  5. Area Stats Widget (Stat Widgets)\n  ========================================================================== */\n\n\n  if ($('#area-stats-widget-chart').length) {\n    var areaStatsChartOptions = {\n      series: [{\n        name: 'Returning',\n        data: [318.42, 407.16, 284.12, 517.00, 452.45, 1209.34, 1010.11]\n      }, {\n        name: 'Newcomers',\n        data: [112.42, 324.45, 457.5, 312.75, 342.45, 527.56, 414.75]\n      }, {\n        name: 'Abandonned',\n        data: [787.89, 534.46, 365.78, 107.45, 145.78, 54.42, 27.12]\n      }],\n      chart: {\n        height: 250,\n        type: 'area',\n        offsetY: -10,\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [themeColors.accent, themeColors.info, themeColors.orange],\n      legend: {\n        position: 'bottom',\n        horizontalAlign: 'center',\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: [2, 2, 2],\n        curve: 'smooth'\n      },\n      xaxis: {\n        type: 'datetime',\n        categories: [\"2020-09-19T00:00:00.000Z\", \"2020-09-20T01:30:00.000Z\", \"2020-09-21T02:30:00.000Z\", \"2020-09-22T03:30:00.000Z\", \"2020-09-23T04:30:00.000Z\", \"2020-09-24T05:30:00.000Z\", \"2020-09-25T06:30:00.000Z\"]\n      },\n      tooltip: {\n        x: {\n          format: 'dd/MM/yy HH:mm'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val;\n          }\n        }\n      }\n    };\n    var areaStatsChart = new ApexCharts(document.querySelector(\"#area-stats-widget-chart\"), areaStatsChartOptions);\n    areaStatsChart.render();\n  }\n  /* ==========================================================================\n  6. Spark Tile Widget (Stat Widgets)\n  ========================================================================== */\n\n\n  if ($('.spark-tile-widget').length) {\n    Apex.grid = {\n      padding: {\n        right: 0,\n        left: 0\n      }\n    };\n    Apex.dataLabels = {\n      enabled: false\n    }; //Array Utility\n\n    var randomizeArray = function randomizeArray(arg) {\n      var array = arg.slice();\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }; // data for the sparklines that appear below header area\n\n\n    var sparklineWidgetData = [472, 454, 547, 385, 562, 247, 652, 318, 379, 391, 622, 515, 355, 415, 358, 271, 932, 534, 615, 278, 546, 435, 192, 465]; //Spark 1\n\n    if ($('#widget-spark-1').length) {\n      var sparkWidget1 = {\n        chart: {\n          id: 'sparklineWidget1',\n          group: 'sparklines',\n          type: 'area',\n          height: 130,\n          sparkline: {\n            enabled: true\n          }\n        },\n        colors: [themeColors.orange],\n        stroke: {\n          width: [2],\n          curve: 'straight'\n        },\n        fill: {\n          opacity: 1\n        },\n        series: [{\n          name: 'Total Sales',\n          data: randomizeArray(sparklineWidgetData)\n        }],\n        labels: _toConsumableArray(Array(24).keys()).map(function (n) {\n          return \"2020-10-0\".concat(n + 1);\n        }),\n        yaxis: {\n          min: 0\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        title: {\n          text: 'Total Sales',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            cssClass: 'apexcharts-yaxis-title',\n            color: themeColors.lightText\n          }\n        },\n        subtitle: {\n          text: '9,374',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            fontWeight: '600',\n            cssClass: 'apexcharts-yaxis-title'\n          }\n        }\n      };\n      new ApexCharts(document.querySelector(\"#widget-spark-1\"), sparkWidget1).render();\n    } //Spark 2\n\n\n    if ($('#widget-spark-2').length) {\n      var sparkWidget2 = {\n        chart: {\n          id: 'sparklineWidget2',\n          group: 'sparklines',\n          type: 'area',\n          height: 130,\n          sparkline: {\n            enabled: true\n          }\n        },\n        colors: [themeColors.info],\n        stroke: {\n          width: [2],\n          curve: 'straight'\n        },\n        fill: {\n          opacity: 1\n        },\n        series: [{\n          name: 'Total Profit',\n          data: randomizeArray(sparklineWidgetData)\n        }],\n        labels: _toConsumableArray(Array(24).keys()).map(function (n) {\n          return \"2020-10-0\".concat(n + 1);\n        }),\n        yaxis: {\n          min: 0\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        title: {\n          text: 'Total Profit',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            cssClass: 'apexcharts-yaxis-title',\n            color: themeColors.lightText\n          }\n        },\n        subtitle: {\n          text: '$24,273.31',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            fontWeight: '600',\n            cssClass: 'apexcharts-yaxis-title'\n          }\n        }\n      };\n      new ApexCharts(document.querySelector(\"#widget-spark-2\"), sparkWidget2).render();\n    } //Spark 3\n\n\n    if ($('#widget-spark-3').length) {\n      var sparkWidget3 = {\n        chart: {\n          id: 'sparklineWidget3',\n          group: 'sparklines',\n          type: 'area',\n          height: 130,\n          sparkline: {\n            enabled: true\n          }\n        },\n        colors: [themeColors.accent],\n        stroke: {\n          width: [2],\n          curve: 'straight'\n        },\n        fill: {\n          opacity: 1\n        },\n        series: [{\n          name: 'Total Orders',\n          data: randomizeArray(sparklineWidgetData)\n        }],\n        labels: _toConsumableArray(Array(24).keys()).map(function (n) {\n          return \"2020-10-0\".concat(n + 1);\n        }),\n        xaxis: {\n          type: 'datetime'\n        },\n        yaxis: {\n          min: 0\n        },\n        title: {\n          text: 'Total Orders',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            cssClass: 'apexcharts-yaxis-title',\n            color: themeColors.lightText\n          }\n        },\n        subtitle: {\n          text: '4,361',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            fontWeight: '600',\n            cssClass: 'apexcharts-yaxis-title'\n          }\n        }\n      };\n      new ApexCharts(document.querySelector(\"#widget-spark-3\"), sparkWidget3).render();\n    } //Spark 4\n\n\n    if ($('#widget-spark-4').length) {\n      var sparkWidget4 = {\n        chart: {\n          id: 'sparklineWidget3',\n          group: 'sparklines',\n          type: 'area',\n          height: 130,\n          sparkline: {\n            enabled: true\n          }\n        },\n        colors: [themeColors.green],\n        stroke: {\n          width: [2],\n          curve: 'straight'\n        },\n        fill: {\n          opacity: 1\n        },\n        series: [{\n          name: 'Consolidated Profit',\n          data: randomizeArray(sparklineWidgetData)\n        }],\n        labels: _toConsumableArray(Array(24).keys()).map(function (n) {\n          return \"2020-10-0\".concat(n + 1);\n        }),\n        xaxis: {\n          type: 'datetime'\n        },\n        yaxis: {\n          min: 0\n        },\n        title: {\n          text: 'Consolidated Profit',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            fontWeight: '500',\n            cssClass: 'apexcharts-yaxis-title',\n            color: themeColors.lightText\n          }\n        },\n        subtitle: {\n          text: '$16,264.37',\n          offsetX: 5,\n          style: {\n            fontSize: '24px',\n            fontWeight: '600',\n            cssClass: 'apexcharts-yaxis-title'\n          }\n        }\n      };\n      new ApexCharts(document.querySelector(\"#widget-spark-4\"), sparkWidget4).render();\n    }\n  }\n  /* ==========================================================================\n  7. Flex Stat Widget (Stat Widgets)\n  ========================================================================== */\n\n\n  if ($('#flex-stat-circle').length) {\n    var flexStatCircleOptions = {\n      series: [65],\n      chart: {\n        height: 130,\n        type: 'radialBar',\n        offsetX: -10,\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [themeColors.purple],\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            size: '75%'\n          },\n          dataLabels: {\n            show: true,\n            name: {\n              show: false,\n              fontSize: \"12px\",\n              fontWeight: 400,\n              offsetY: 5,\n              color: themeColors.lightText\n            },\n            value: {\n              show: true,\n              fontWeight: 600,\n              fontFamily: 'Roboto, sans-serif',\n              color: themeColors.purple,\n              fontSize: \"16px\",\n              offsetY: 5\n            }\n          }\n        }\n      },\n      labels: ['Progress']\n    };\n    var flexStatCircle = new ApexCharts(document.querySelector(\"#flex-stat-circle\"), flexStatCircleOptions);\n    flexStatCircle.render();\n  }\n\n  if ($('#flex-stat-radial').length) {\n    var flexStatRadialOptions = {\n      series: [65],\n      chart: {\n        height: 160,\n        type: 'radialBar',\n        offsetX: -15,\n        offsetY: -10,\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [themeColors.info, themeColors.secondary],\n      plotOptions: {\n        radialBar: {\n          startAngle: -135,\n          endAngle: 135,\n          dataLabels: {\n            name: {\n              fontSize: '13px',\n              fontWeight: '600',\n              color: themeColors.lightText,\n              show: false\n            },\n            value: {\n              offsetY: 5,\n              fontSize: '16px',\n              fontFamily: 'Roboto, sans-serif',\n              fontWeight: '500',\n              color: undefined,\n              formatter: function formatter(val) {\n                return val + \"%\";\n              }\n            }\n          }\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: 'dark',\n          shadeIntensity: 0.15,\n          inverseColors: false,\n          opacityFrom: 1,\n          opacityTo: 1,\n          stops: [0, 50, 65, 91]\n        }\n      },\n      stroke: {\n        dashArray: 4\n      },\n      labels: ['(30 days)']\n    };\n    var flexStatRadial = new ApexCharts(document.querySelector(\"#flex-stat-radial\"), flexStatRadialOptions);\n    flexStatRadial.render();\n  }\n  /* ==========================================================================\n  8. Grouped Stat Widget (Stat Widgets)\n  ========================================================================== */\n\n\n  if ($('.chart-group').length) {\n    if ($('#widget-group-radial-1').length) {\n      //Small Radial 1\n      var widgetRadialGroup1Options = {\n        series: [31],\n        chart: {\n          height: 80,\n          type: 'radialBar',\n          offsetY: -10,\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.info],\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              size: '35%'\n            },\n            dataLabels: {\n              show: false\n            }\n          }\n        },\n        labels: ['']\n      };\n      var widgetRadialGroup1 = new ApexCharts(document.querySelector(\"#widget-group-radial-1\"), widgetRadialGroup1Options);\n      widgetRadialGroup1.render();\n    }\n\n    if ($('#widget-group-radial-2').length) {\n      //Small Radial 2\n      var widgetRadialGroup2Options = {\n        series: [53],\n        chart: {\n          height: 80,\n          type: 'radialBar',\n          offsetY: -10,\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.orange],\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              size: '35%'\n            },\n            dataLabels: {\n              show: false\n            }\n          }\n        },\n        labels: ['']\n      };\n      var widgetRadialGroup2 = new ApexCharts(document.querySelector(\"#widget-group-radial-2\"), widgetRadialGroup2Options);\n      widgetRadialGroup2.render();\n    }\n\n    if ($('#widget-group-radial-3').length) {\n      //Small Radial 3\n      var widgetRadialGroup3Options = {\n        series: [84],\n        chart: {\n          height: 80,\n          type: 'radialBar',\n          offsetY: -10,\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.green],\n        plotOptions: {\n          radialBar: {\n            hollow: {\n              size: '35%'\n            },\n            dataLabels: {\n              show: false\n            }\n          }\n        },\n        labels: ['']\n      };\n      var widgetRadialGroup3 = new ApexCharts(document.querySelector(\"#widget-group-radial-3\"), widgetRadialGroup3Options);\n      widgetRadialGroup3.render();\n    }\n\n    if ($('#widget-group-radial-4').length) {\n      var widgetRadialGroup4Options = {\n        series: [57],\n        chart: {\n          height: 100,\n          type: 'radialBar',\n          //offsetY: -20,\n          sparkline: {\n            enabled: true\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.accent],\n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            hollow: {\n              size: '35%'\n            },\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: '97%',\n              margin: 5,\n              // margin is in pixels\n              dropShadow: {\n                enabled: false,\n                top: 2,\n                left: 0,\n                color: '#999',\n                opacity: 1,\n                blur: 2\n              }\n            },\n            dataLabels: {\n              name: {\n                show: false\n              },\n              value: {\n                show: false,\n                offsetY: -2,\n                fontSize: '22px'\n              }\n            }\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shade: 'light',\n            shadeIntensity: 0.1,\n            inverseColors: false,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 53, 91]\n          }\n        },\n        labels: ['Average Results']\n      };\n      var widgetRadialGroup4 = new ApexCharts(document.querySelector(\"#widget-group-radial-4\"), widgetRadialGroup4Options);\n      widgetRadialGroup4.render();\n    }\n\n    if ($('#widget-group-radial-5').length) {\n      var widgetRadialGroup5Options = {\n        series: [36],\n        chart: {\n          height: 100,\n          type: 'radialBar',\n          //offsetY: -20,\n          sparkline: {\n            enabled: true\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.orange],\n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            hollow: {\n              size: '35%'\n            },\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: '97%',\n              margin: 5,\n              // margin is in pixels\n              dropShadow: {\n                enabled: false,\n                top: 2,\n                left: 0,\n                color: '#999',\n                opacity: 1,\n                blur: 2\n              }\n            },\n            dataLabels: {\n              name: {\n                show: false\n              },\n              value: {\n                show: false,\n                offsetY: -2,\n                fontSize: '22px'\n              }\n            }\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shade: 'light',\n            shadeIntensity: 0.1,\n            inverseColors: false,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 53, 91]\n          }\n        },\n        labels: ['Average Results']\n      };\n      var widgetRadialGroup5 = new ApexCharts(document.querySelector(\"#widget-group-radial-5\"), widgetRadialGroup5Options);\n      widgetRadialGroup5.render();\n    }\n\n    if ($('#widget-group-radial-6').length) {\n      var widgetRadialGroup6Options = {\n        series: [88],\n        chart: {\n          height: 100,\n          type: 'radialBar',\n          //offsetY: -20,\n          sparkline: {\n            enabled: true\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        colors: [themeColors.green],\n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            hollow: {\n              size: '35%'\n            },\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: '97%',\n              margin: 5,\n              // margin is in pixels\n              dropShadow: {\n                enabled: false,\n                top: 2,\n                left: 0,\n                color: '#999',\n                opacity: 1,\n                blur: 2\n              }\n            },\n            dataLabels: {\n              name: {\n                show: false\n              },\n              value: {\n                show: false,\n                offsetY: -2,\n                fontSize: '22px'\n              }\n            }\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shade: 'light',\n            shadeIntensity: 0.1,\n            inverseColors: false,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 53, 91]\n          }\n        },\n        labels: ['Average Results']\n      };\n      var widgetRadialGroup6 = new ApexCharts(document.querySelector(\"#widget-group-radial-6\"), widgetRadialGroup6Options);\n      widgetRadialGroup6.render();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/widgets.js"]();
/******/ 	
/******/ })()
;